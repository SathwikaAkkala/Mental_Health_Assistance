{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\OneDrive\\\\Desktop\\\\empathy_websi\\\\empathy-friend-website\\\\src\\\\pages\\\\Chatbotpage.jsx\",\n  _s = $RefreshSig$();\n// src/pages/Chatbotpage.jsx\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chatbotpage() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n\n  // Replace with your own OpenAI API key\n  const OPENAI_API_KEY = 'YOUR_OPENAI_API_KEY';\n  const handleSend = async () => {\n    if (input.trim() === '') return;\n\n    // Add user message\n    const newMessages = [...messages, {\n      text: input,\n      type: 'user'\n    }];\n    setMessages(newMessages);\n    setInput('');\n    setIsTyping(true);\n    try {\n      var _data$choices$0$messa, _data$choices, _data$choices$, _data$choices$$messag, _data$choices$$messag2;\n      // Call OpenAI GPT API\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${OPENAI_API_KEY}`\n        },\n        body: JSON.stringify({\n          model: 'gpt-4o-mini',\n          // or 'gpt-4o' or 'gpt-4o-mini' depending on availability\n          messages: [{\n            role: 'system',\n            content: \"You are an empathetic emotional support assistant. Respond kindly, gently, and focus on users' feelings. Act like a friendly emotional support companion.\"\n          }, ...newMessages.map(msg => ({\n            role: msg.type === 'user' ? 'user' : 'assistant',\n            content: msg.text\n          }))],\n          max_tokens: 150,\n          temperature: 0.7\n        })\n      });\n      const data = await response.json();\n      const botReply = (_data$choices$0$messa = (_data$choices = data.choices) === null || _data$choices === void 0 ? void 0 : (_data$choices$ = _data$choices[0]) === null || _data$choices$ === void 0 ? void 0 : (_data$choices$$messag = _data$choices$.message) === null || _data$choices$$messag === void 0 ? void 0 : (_data$choices$$messag2 = _data$choices$$messag.content) === null || _data$choices$$messag2 === void 0 ? void 0 : _data$choices$$messag2.trim()) !== null && _data$choices$0$messa !== void 0 ? _data$choices$0$messa : \"Sorry, I couldn't process that.\";\n      setMessages(prev => [...prev, {\n        text: botReply,\n        type: 'bot'\n      }]);\n    } catch (error) {\n      setMessages(prev => [...prev, {\n        text: \"Oops! Something went wrong. Please try again.\",\n        type: 'bot'\n      }]);\n      console.error('OpenAI API error:', error);\n    } finally {\n      setIsTyping(false);\n    }\n  };\n  const handleKeyDown = e => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      handleSend();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen flex flex-col items-center justify-center bg-cover bg-center p-8\",\n    style: {\n      backgroundImage: \"url('/images/chatbot-bg.jpg')\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-4xl font-bold mb-6 text-white drop-shadow-lg\",\n      children: \"AI-Powered Emotional Friend \\uD83E\\uDD17\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full max-w-4xl h-[600px] overflow-y-auto border border-white rounded-lg \\r bg-white bg-opacity-30 backdrop-blur-md p-6 mb-6 shadow-xl\",\n      children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `p-3 my-3 rounded-lg text-lg ${msg.type === 'user' ? 'bg-purple-200 text-right' : 'bg-green-200 text-left'}`,\n        children: msg.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this)), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-3 my-3 rounded-lg bg-green-200 text-left animate-pulse text-lg\",\n        children: \"Typing...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex w-full max-w-4xl space-x-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        onKeyDown: handleKeyDown,\n        placeholder: \"Share how you're feeling...\",\n        className: \"flex-grow px-5 py-3 border border-gray-300 rounded-lg text-lg\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSend,\n        className: \"bg-purple-700 text-white px-6 py-3 rounded-lg text-lg font-semibold hover:bg-purple-800\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n_s(Chatbotpage, \"GIm8bEhSd+QxLCq5fkptu2//Ia4=\");\n_c = Chatbotpage;\nexport default Chatbotpage;\nvar _c;\n$RefreshReg$(_c, \"Chatbotpage\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Chatbotpage","_s","messages","setMessages","input","setInput","isTyping","setIsTyping","OPENAI_API_KEY","handleSend","trim","newMessages","text","type","_data$choices$0$messa","_data$choices","_data$choices$","_data$choices$$messag","_data$choices$$messag2","response","fetch","method","headers","Authorization","body","JSON","stringify","model","role","content","map","msg","max_tokens","temperature","data","json","botReply","choices","message","prev","error","console","handleKeyDown","e","key","preventDefault","className","style","backgroundImage","children","fileName","_jsxFileName","lineNumber","columnNumber","index","value","onChange","target","onKeyDown","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/DELL/OneDrive/Desktop/empathy_websi/empathy-friend-website/src/pages/Chatbotpage.jsx"],"sourcesContent":["// src/pages/Chatbotpage.jsx\r\nimport React, { useState } from 'react';\r\n\r\nfunction Chatbotpage() {\r\n  const [messages, setMessages] = useState([]);\r\n  const [input, setInput] = useState('');\r\n  const [isTyping, setIsTyping] = useState(false);\r\n\r\n  // Replace with your own OpenAI API key\r\n  const OPENAI_API_KEY = 'YOUR_OPENAI_API_KEY';\r\n\r\n  const handleSend = async () => {\r\n    if (input.trim() === '') return;\r\n\r\n    // Add user message\r\n    const newMessages = [...messages, { text: input, type: 'user' }];\r\n    setMessages(newMessages);\r\n    setInput('');\r\n\r\n    setIsTyping(true);\r\n\r\n    try {\r\n      // Call OpenAI GPT API\r\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${OPENAI_API_KEY}`,\r\n        },\r\n        body: JSON.stringify({\r\n          model: 'gpt-4o-mini', // or 'gpt-4o' or 'gpt-4o-mini' depending on availability\r\n          messages: [\r\n            {\r\n              role: 'system',\r\n              content:\r\n                \"You are an empathetic emotional support assistant. Respond kindly, gently, and focus on users' feelings. Act like a friendly emotional support companion.\",\r\n            },\r\n            ...newMessages.map((msg) => ({\r\n              role: msg.type === 'user' ? 'user' : 'assistant',\r\n              content: msg.text,\r\n            })),\r\n          ],\r\n          max_tokens: 150,\r\n          temperature: 0.7,\r\n        }),\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      const botReply = data.choices?.[0]?.message?.content?.trim() ?? \"Sorry, I couldn't process that.\";\r\n\r\n      setMessages((prev) => [...prev, { text: botReply, type: 'bot' }]);\r\n    } catch (error) {\r\n      setMessages((prev) => [...prev, { text: \"Oops! Something went wrong. Please try again.\", type: 'bot' }]);\r\n      console.error('OpenAI API error:', error);\r\n    } finally {\r\n      setIsTyping(false);\r\n    }\r\n  };\r\n\r\n  const handleKeyDown = (e) => {\r\n    if (e.key === 'Enter') {\r\n      e.preventDefault();\r\n      handleSend();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"min-h-screen flex flex-col items-center justify-center bg-cover bg-center p-8\"\r\n      style={{ backgroundImage: \"url('/images/chatbot-bg.jpg')\" }}\r\n    >\r\n      <h2 className=\"text-4xl font-bold mb-6 text-white drop-shadow-lg\">AI-Powered Emotional Friend ðŸ¤—</h2>\r\n\r\n      {/* Chatbox */}\r\n      <div\r\n        className=\"w-full max-w-4xl h-[600px] overflow-y-auto border border-white rounded-lg \r\n                   bg-white bg-opacity-30 backdrop-blur-md p-6 mb-6 shadow-xl\"\r\n      >\r\n        {messages.map((msg, index) => (\r\n          <div\r\n            key={index}\r\n            className={`p-3 my-3 rounded-lg text-lg ${\r\n              msg.type === 'user' ? 'bg-purple-200 text-right' : 'bg-green-200 text-left'\r\n            }`}\r\n          >\r\n            {msg.text}\r\n          </div>\r\n        ))}\r\n\r\n        {/* Typing animation */}\r\n        {isTyping && (\r\n          <div className=\"p-3 my-3 rounded-lg bg-green-200 text-left animate-pulse text-lg\">\r\n            Typing...\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Input */}\r\n      <div className=\"flex w-full max-w-4xl space-x-4\">\r\n        <input\r\n          type=\"text\"\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          onKeyDown={handleKeyDown}\r\n          placeholder=\"Share how you're feeling...\"\r\n          className=\"flex-grow px-5 py-3 border border-gray-300 rounded-lg text-lg\"\r\n        />\r\n        <button\r\n          onClick={handleSend}\r\n          className=\"bg-purple-700 text-white px-6 py-3 rounded-lg text-lg font-semibold hover:bg-purple-800\"\r\n        >\r\n          Send\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chatbotpage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}