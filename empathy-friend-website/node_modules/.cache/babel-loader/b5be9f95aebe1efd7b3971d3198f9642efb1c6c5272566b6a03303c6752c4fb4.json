{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\OneDrive\\\\Desktop\\\\empathy_websi\\\\empathy-friend-website\\\\src\\\\components\\\\MoodSetter.jsx\",\n  _s = $RefreshSig$();\n// src/components/MoodSetter.jsx\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MoodSetter() {\n  _s();\n  const [mood, setMood] = useState('');\n  const detectMood = () => {\n    // For now → simple mock logic → later integrate TensorFlow\n    const moods = ['Happy', 'Sad', 'Anxious', 'Angry', 'Calm'];\n    const randomMood = moods[Math.floor(Math.random() * moods.length)];\n    setMood(randomMood);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"text-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: detectMood,\n      className: \"bg-green-500 text-white px-6 py-2 rounded mb-4 hover:bg-green-600\",\n      children: \"Detect Mood\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), mood && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-xl font-bold\",\n      children: [\"Current Mood: \", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"text-purple-700\",\n        children: mood\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-4 text-md\",\n        children: [mood === 'Happy' && 'Keep smiling! Spread the joy!', mood === 'Sad' && 'It\\'s okay to feel sad. Let\\'s talk it out.', mood === 'Anxious' && 'Take deep breaths. You\\'ve got this!', mood === 'Angry' && 'Let\\'s calm down together.', mood === 'Calm' && 'Great! Enjoy this peace.']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n}\n_s(MoodSetter, \"tTxHQwesqZmzzHbWPwzTdn8fm9A=\");\n_c = MoodSetter;\nexport default MoodSetter;\nvar _c;\n$RefreshReg$(_c, \"MoodSetter\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","MoodSetter","_s","mood","setMood","detectMood","moods","randomMood","Math","floor","random","length","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/DELL/OneDrive/Desktop/empathy_websi/empathy-friend-website/src/components/MoodSetter.jsx"],"sourcesContent":["// src/components/MoodSetter.jsx\r\nimport React, { useState } from 'react';\r\n\r\nfunction MoodSetter() {\r\n  const [mood, setMood] = useState('');\r\n\r\n  const detectMood = () => {\r\n    // For now → simple mock logic → later integrate TensorFlow\r\n    const moods = ['Happy', 'Sad', 'Anxious', 'Angry', 'Calm'];\r\n    const randomMood = moods[Math.floor(Math.random() * moods.length)];\r\n    setMood(randomMood);\r\n  };\r\n\r\n  return (\r\n    <div className=\"text-center\">\r\n      <button onClick={detectMood} className=\"bg-green-500 text-white px-6 py-2 rounded mb-4 hover:bg-green-600\">Detect Mood</button>\r\n      {mood && (\r\n        <div className=\"text-xl font-bold\">\r\n          Current Mood: <span className=\"text-purple-700\">{mood}</span>\r\n          <div className=\"mt-4 text-md\">\r\n            {mood === 'Happy' && 'Keep smiling! Spread the joy!'}\r\n            {mood === 'Sad' && 'It\\'s okay to feel sad. Let\\'s talk it out.'}\r\n            {mood === 'Anxious' && 'Take deep breaths. You\\'ve got this!'}\r\n            {mood === 'Angry' && 'Let\\'s calm down together.'}\r\n            {mood === 'Calm' && 'Great! Enjoy this peace.'}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MoodSetter;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAEpC,MAAMO,UAAU,GAAGA,CAAA,KAAM;IACvB;IACA,MAAMC,KAAK,GAAG,CAAC,OAAO,EAAE,KAAK,EAAE,SAAS,EAAE,OAAO,EAAE,MAAM,CAAC;IAC1D,MAAMC,UAAU,GAAGD,KAAK,CAACE,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGJ,KAAK,CAACK,MAAM,CAAC,CAAC;IAClEP,OAAO,CAACG,UAAU,CAAC;EACrB,CAAC;EAED,oBACEP,OAAA;IAAKY,SAAS,EAAC,aAAa;IAAAC,QAAA,gBAC1Bb,OAAA;MAAQc,OAAO,EAAET,UAAW;MAACO,SAAS,EAAC,mEAAmE;MAAAC,QAAA,EAAC;IAAW;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAC9Hf,IAAI,iBACHH,OAAA;MAAKY,SAAS,EAAC,mBAAmB;MAAAC,QAAA,GAAC,gBACnB,eAAAb,OAAA;QAAMY,SAAS,EAAC,iBAAiB;QAAAC,QAAA,EAAEV;MAAI;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eAC7DlB,OAAA;QAAKY,SAAS,EAAC,cAAc;QAAAC,QAAA,GAC1BV,IAAI,KAAK,OAAO,IAAI,+BAA+B,EACnDA,IAAI,KAAK,KAAK,IAAI,6CAA6C,EAC/DA,IAAI,KAAK,SAAS,IAAI,sCAAsC,EAC5DA,IAAI,KAAK,OAAO,IAAI,4BAA4B,EAChDA,IAAI,KAAK,MAAM,IAAI,0BAA0B;MAAA;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC3C,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAChB,EAAA,CA3BQD,UAAU;AAAAkB,EAAA,GAAVlB,UAAU;AA6BnB,eAAeA,UAAU;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}